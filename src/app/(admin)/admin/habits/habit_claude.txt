These are the supabase instructions for running a pg_cron job. 

I want to take all of my habits that weren't completed and add a new habit_records for each of the habits that wasn't completed in full (for each of the habit times associated) 

CAn you walk me through creating the pg_cron?

The pg_cron extension is a simple cron-based job scheduler for PostgreSQL that runs inside the database.

pg_cron is not fully supported on Fly Postgres. Read more about this Fly Postgres limitation here.

Usage#

Enable the extension#

DashboardSQL

Go to the Database page in the Dashboard.

Click on Extensions in the sidebar.

Search for "pg_cron" and enable the extension.

Syntax#

The schedule uses the standard cron syntax, in which * means "run every time period", and a specific number means "but only at this time":

1

 ┌───────────── min (0 - 59)

2

 │ ┌────────────── hour (0 - 23)

3

 │ │ ┌─────────────── day of month (1 - 31)

4

 │ │ │ ┌──────────────── month (1 - 12)

5

 │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to

6

 │ │ │ │ │ Saturday, or use names; 7 is also Sunday)

7

 │ │ │ │ │

8

 │ │ │ │ │

9

 * * * * *

You can use crontab.guru to help validate your cron schedules.

Scheduling system maintenance#

Be extremely careful when setting up pg_cron jobs for system maintenance tasks as they can have unintended consequences. For instance, scheduling a command to terminate idle connections with pg_terminate_backend(pid) can disrupt critical background processes like nightly backups. Often, there is an existing Postgres setting e.g. idle_session_timeout that can perform these common maintenance tasks without the risk.

Reach out to Supabase Support if you're unsure if that applies to your use case.

Examples#

Delete data every week#

Delete old data on Saturday at 3:30am (GMT):

1

select cron.schedule (

2

 'saturday-cleanup', -- name of the cron job

3

 '30 3 * * 6', -- Saturday at 3:30am (GMT)

4

 $$ delete from events where event_time < now() - interval '1 week' $$

5

);

Run a vacuum every day#

Vacuum every day at 3:00am (GMT)

1

select cron.schedule('nightly-vacuum', '0 3 * * *', 'VACUUM');

Invoke Supabase Edge Function every minute#

Make a POST request to a Supabase Edge Function every minute. Note: this requires the pg_net extension to be enabled.

1

select

2

 cron.schedule(

3

 'invoke-function-every-minute',

4

 '* * * * *', -- every minute

5

 $$

6

 select

7

 net.http_post(

8

 url:='https://project-ref.supabase.co/functions/v1/function-name',

9

 headers:='{"Content-Type": "application/json", "Authorization": "Bearer YOUR_ANON_KEY"}'::jsonb,

10

 body:=concat('{"time": "', now(), '"}')::jsonb

11

 ) as request_id;

12

 $$

13

 );

Edit a job#

Changes the frequency of a job called 'vacuum' to once every 5 minutes.

1

select cron.alter_job(

2

 job_id := (select jobid from cron.job where jobname = 'vacuum'),

3

 schedule := '*/5 * * * *'

4

);

Full options for the cron.alter_job() function are:

1

cron.alter_job(

2

 job_id bigint,

3

 schedule text default null,

4

 command text default null,

5

 database text default null,

6

 username text default null,

7

 active boolean default null

8

)

Unschedule a job#

Unschedules a job called 'nightly-vacuum'

1

select cron.unschedule('nightly-vacuum');

Viewing previously ran jobs#

View the last ten jobs that have ran

1

select

2

 *

3

from cron.job_run_details

4

order by start_time desc

5

limit 10;

The records in cron.job_run_details are not cleaned automatically which will take up disk space in your datbabase.

Resources#

pg_cron GitHub Repository

My table definitions

create table
  public.habits (
    id serial,
    user_id uuid null,
    name text not null,
    completed boolean null default false,
    created_at timestamp with time zone null default now(),
    due_frequency character varying(20) null default 'daily'::character varying,
    due_weekdays text[] null default '{}'::text[],
    due_date date null,
    due_times text[] null default '{}'::text[],
    completed_times boolean[] null default '{}'::boolean[],
    constraint habits_pkey primary key (id),
    constraint habits_user_id_fkey foreign key (user_id) references auth.users (id)
  ) tablespace pg_default;create table
  public.habit_records (
    id serial,
    habit_id integer null,
    completed_at timestamp with time zone null,
    is_completed boolean not null default false,
    due_time text null,
    constraint habit_records_pkey primary key (id),
    constraint habit_records_habit_id_fkey foreign key (habit_id) references habits (id)
  ) tablespace pg_default;

